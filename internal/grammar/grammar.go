package grammar

import (
	"fmt"
)

// Dada una gram√°tica, elimina todas las producciones epsilon
func SimplifyGrammar(grammar *Grammar, printSteps bool) *Grammar {

	// Asegurar que el s√≠mbolo inicial sea el primer no terminal en la lista nonTerminals
	if len(grammar.NonTerminals) == 0 {
		return grammar
	}

	startSymbol := grammar.NonTerminals[0]

	if printSteps {
		fmt.Println("\n1Ô∏è‚É£  Gram√°tica ANTES de la simplificaci√≥n:")
		fmt.Println(grammar.String(true))
	}

	fmt.Println("\n2Ô∏è‚É£  FACTORIZACION POR LA IZQUIERDA:")
	factorizedGrammar := factorizeGrammar(grammar)
	if printSteps {
		fmt.Println(factorizedGrammar.String(true))
	}

	// fmt.Println("\nr3Ô∏è‚É£ REMOVER RECURSION POR LA IZQUIERDA:")
	// grammarWithouthRecursion := removeLeftRecursivity(factorizedGrammar)
	// if printSteps {
	// 	fmt.Println(grammarWithouthRecursion.String(true))
	// }

	fmt.Println("\n4Ô∏è‚É£  ELIMINACI√ìN DE EPSILON:")

	// Paso 1: Identificar los s√≠mbolos directos anulables
	directNullables := identifyDirectNullables(factorizedGrammar)
	if printSteps {
		fmt.Println("\nüî¥  2.1 S√≠mbolos anulables directos encontrados:")
		fmt.Printf("\t%v\n", *directNullables)
	}

	// Paso 2: Identificar todos los s√≠mbolos anulables (directos e indirectos)
	allNullables := identifyIndirectNullables(factorizedGrammar, *directNullables)
	if printSteps {
		fmt.Println("\nüî¥  2.2 Todos los s√≠mbolos anulables encontrados:")
		fmt.Printf("\t%v\n", *allNullables)
	}

	// Paso 3: Reemplazar los s√≠mbolos anulables en las producciones
	grammarWithoutEpsilons := ReplaceNullables(factorizedGrammar, *allNullables)
	if printSteps {
		fmt.Println("\nüî¥  2.3 Gram√°tica DESPU√âS de reemplazar los anulables:")
		fmt.Println(grammarWithoutEpsilons.String(true))
	}

	// Paso 4: Eliminar producciones √©psilon
	finalGrammar1 := RemoveEpsilons(grammarWithoutEpsilons)
	if printSteps {
		fmt.Println("\nüî¥  2.4 Gram√°tica DESPU√âS de eliminar las producciones epsilon:")
		fmt.Println(finalGrammar1.String(true))
	}

	// Paso 5: Eliminar producciones unarias
	fmt.Println("\n5Ô∏è‚É£  ELIMINACI√ìN DE PRODUCCIONES UNARIAS:")
	finalGrammar2 := RemoveUnaryProductions(finalGrammar1, finalGrammar1.NonTerminals)
	if printSteps {
		fmt.Println("\nüî¥  3.1 Gram√°tica DESPU√âS de eliminar producciones unarias:")
		fmt.Println(finalGrammar2.String(true))
	}

	// Paso 6: Eliminar s√≠mbolos in√∫tiles
	fmt.Println("\n6Ô∏è‚É£  ELIMINACI√ìN DE SIMBOLOS INUTILES:")
	finalGrammar3 := RemoveUselessSymbols(finalGrammar2, startSymbol)
	if printSteps {
		fmt.Println("\nüî¥  4.1 Gram√°tica DESPU√âS de eliminar s√≠mbolos in√∫tiles:")
		fmt.Println(finalGrammar3.String(true))
	}

	// Paso 7: Normalizar paso 1
	fmt.Println("\n7Ô∏è‚É£  SIMPLIFICACI√ìN A FORMA NORMAL DE CHOMSKY:")
	ncfGrammar1 := CNFTerminalSubstitution(finalGrammar3)
	if printSteps {
		fmt.Println("\nüî¥  5.1 Gram√°tica DESPU√âS de normalizar el paso 1 de Chomsky:")
		fmt.Println(ncfGrammar1.String(true))
	}

	// Paso 8: Normalizar paso 2
	ncfGrammar2 := CNFSplitLargeProductions(ncfGrammar1)
	if printSteps {
		fmt.Println("\nüî¥  5.2 Gram√°tica DESPU√âS de normalizar el paso 2 de Chomsky:")
		fmt.Println(ncfGrammar2.String(true))
	}

	sortGrammar := OrderProductionsByNonTerminals(ncfGrammar2)

	return sortGrammar
}
